/*
Cluster Topology Management API

API for managing cluster membership and partition distribution.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zbmgmt

import (
	"encoding/json"
	"time"
)

// checks if the TopologyChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TopologyChange{}

// TopologyChange struct for TopologyChange
type TopologyChange struct {
	// The ID of a topology change operation
	Id     *int64  `json:"id,omitempty"`
	Status *string `json:"status,omitempty"`
	// The time when the topology change was started
	StartedAt *time.Time `json:"startedAt,omitempty"`
	// The time when the topology change was completed
	CompletedAt *time.Time `json:"completedAt,omitempty"`
	// The internal version of the topology change
	InternalVersion *int64 `json:"internalVersion,omitempty"`
	// The list of operations that have been completed if the change status is not COMPLETED.
	Completed []TopologyChangeCompletedInner `json:"completed,omitempty"`
	// The list of operations that are pending.
	Pending []Operation `json:"pending,omitempty"`
}

// NewTopologyChange instantiates a new TopologyChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopologyChange() *TopologyChange {
	this := TopologyChange{}
	return &this
}

// NewTopologyChangeWithDefaults instantiates a new TopologyChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopologyChangeWithDefaults() *TopologyChange {
	this := TopologyChange{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TopologyChange) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologyChange) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TopologyChange) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *TopologyChange) SetId(v int64) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TopologyChange) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologyChange) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TopologyChange) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TopologyChange) SetStatus(v string) {
	o.Status = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *TopologyChange) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologyChange) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *TopologyChange) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *TopologyChange) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *TopologyChange) GetCompletedAt() time.Time {
	if o == nil || IsNil(o.CompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologyChange) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *TopologyChange) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *TopologyChange) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

// GetInternalVersion returns the InternalVersion field value if set, zero value otherwise.
func (o *TopologyChange) GetInternalVersion() int64 {
	if o == nil || IsNil(o.InternalVersion) {
		var ret int64
		return ret
	}
	return *o.InternalVersion
}

// GetInternalVersionOk returns a tuple with the InternalVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologyChange) GetInternalVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.InternalVersion) {
		return nil, false
	}
	return o.InternalVersion, true
}

// HasInternalVersion returns a boolean if a field has been set.
func (o *TopologyChange) HasInternalVersion() bool {
	if o != nil && !IsNil(o.InternalVersion) {
		return true
	}

	return false
}

// SetInternalVersion gets a reference to the given int64 and assigns it to the InternalVersion field.
func (o *TopologyChange) SetInternalVersion(v int64) {
	o.InternalVersion = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *TopologyChange) GetCompleted() []TopologyChangeCompletedInner {
	if o == nil || IsNil(o.Completed) {
		var ret []TopologyChangeCompletedInner
		return ret
	}
	return o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologyChange) GetCompletedOk() ([]TopologyChangeCompletedInner, bool) {
	if o == nil || IsNil(o.Completed) {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *TopologyChange) HasCompleted() bool {
	if o != nil && !IsNil(o.Completed) {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given []TopologyChangeCompletedInner and assigns it to the Completed field.
func (o *TopologyChange) SetCompleted(v []TopologyChangeCompletedInner) {
	o.Completed = v
}

// GetPending returns the Pending field value if set, zero value otherwise.
func (o *TopologyChange) GetPending() []Operation {
	if o == nil || IsNil(o.Pending) {
		var ret []Operation
		return ret
	}
	return o.Pending
}

// GetPendingOk returns a tuple with the Pending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologyChange) GetPendingOk() ([]Operation, bool) {
	if o == nil || IsNil(o.Pending) {
		return nil, false
	}
	return o.Pending, true
}

// HasPending returns a boolean if a field has been set.
func (o *TopologyChange) HasPending() bool {
	if o != nil && !IsNil(o.Pending) {
		return true
	}

	return false
}

// SetPending gets a reference to the given []Operation and assigns it to the Pending field.
func (o *TopologyChange) SetPending(v []Operation) {
	o.Pending = v
}

func (o TopologyChange) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TopologyChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StartedAt) {
		toSerialize["startedAt"] = o.StartedAt
	}
	if !IsNil(o.CompletedAt) {
		toSerialize["completedAt"] = o.CompletedAt
	}
	if !IsNil(o.InternalVersion) {
		toSerialize["internalVersion"] = o.InternalVersion
	}
	if !IsNil(o.Completed) {
		toSerialize["completed"] = o.Completed
	}
	if !IsNil(o.Pending) {
		toSerialize["pending"] = o.Pending
	}
	return toSerialize, nil
}

type NullableTopologyChange struct {
	value *TopologyChange
	isSet bool
}

func (v NullableTopologyChange) Get() *TopologyChange {
	return v.value
}

func (v *NullableTopologyChange) Set(val *TopologyChange) {
	v.value = val
	v.isSet = true
}

func (v NullableTopologyChange) IsSet() bool {
	return v.isSet
}

func (v *NullableTopologyChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopologyChange(val *TopologyChange) *NullableTopologyChange {
	return &NullableTopologyChange{value: val, isSet: true}
}

func (v NullableTopologyChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopologyChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
