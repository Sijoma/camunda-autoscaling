/*
Cluster Topology Management API

API for managing cluster membership and partition distribution.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zbmgmt

import (
	"encoding/json"
)

// checks if the PartitionState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartitionState{}

// PartitionState struct for PartitionState
type PartitionState struct {
	// The ID of a partition, starting from 1
	Id    *int32              `json:"id,omitempty"`
	State *PartitionStateCode `json:"state,omitempty"`
	// The priority of the partition
	Priority *int32           `json:"priority,omitempty"`
	Config   *PartitionConfig `json:"config,omitempty"`
}

// NewPartitionState instantiates a new PartitionState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartitionState() *PartitionState {
	this := PartitionState{}
	return &this
}

// NewPartitionStateWithDefaults instantiates a new PartitionState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionStateWithDefaults() *PartitionState {
	this := PartitionState{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PartitionState) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionState) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PartitionState) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PartitionState) SetId(v int32) {
	o.Id = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PartitionState) GetState() PartitionStateCode {
	if o == nil || IsNil(o.State) {
		var ret PartitionStateCode
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionState) GetStateOk() (*PartitionStateCode, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PartitionState) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given PartitionStateCode and assigns it to the State field.
func (o *PartitionState) SetState(v PartitionStateCode) {
	o.State = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *PartitionState) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionState) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *PartitionState) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *PartitionState) SetPriority(v int32) {
	o.Priority = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *PartitionState) GetConfig() PartitionConfig {
	if o == nil || IsNil(o.Config) {
		var ret PartitionConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionState) GetConfigOk() (*PartitionConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *PartitionState) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given PartitionConfig and assigns it to the Config field.
func (o *PartitionState) SetConfig(v PartitionConfig) {
	o.Config = &v
}

func (o PartitionState) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartitionState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

type NullablePartitionState struct {
	value *PartitionState
	isSet bool
}

func (v NullablePartitionState) Get() *PartitionState {
	return v.value
}

func (v *NullablePartitionState) Set(val *PartitionState) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionState) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionState(val *PartitionState) *NullablePartitionState {
	return &NullablePartitionState{value: val, isSet: true}
}

func (v NullablePartitionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
