/*
Cluster Topology Management API

API for managing cluster membership and partition distribution.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zbmgmt

import (
	"encoding/json"
	"fmt"
)

// PartitionStateCode State of a partition
type PartitionStateCode string

// List of PartitionStateCode
const (
	PARTITIONSTATECODE_UNKNOWN PartitionStateCode = "UNKNOWN"
	PARTITIONSTATECODE_JOINING PartitionStateCode = "JOINING"
	PARTITIONSTATECODE_ACTIVE  PartitionStateCode = "ACTIVE"
	PARTITIONSTATECODE_LEAVING PartitionStateCode = "LEAVING"
)

// All allowed values of PartitionStateCode enum
var AllowedPartitionStateCodeEnumValues = []PartitionStateCode{
	"UNKNOWN",
	"JOINING",
	"ACTIVE",
	"LEAVING",
}

func (v *PartitionStateCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PartitionStateCode(value)
	for _, existing := range AllowedPartitionStateCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PartitionStateCode", value)
}

// NewPartitionStateCodeFromValue returns a pointer to a valid PartitionStateCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPartitionStateCodeFromValue(v string) (*PartitionStateCode, error) {
	ev := PartitionStateCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PartitionStateCode: valid values are %v", v, AllowedPartitionStateCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PartitionStateCode) IsValid() bool {
	for _, existing := range AllowedPartitionStateCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PartitionStateCode value
func (v PartitionStateCode) Ptr() *PartitionStateCode {
	return &v
}

type NullablePartitionStateCode struct {
	value *PartitionStateCode
	isSet bool
}

func (v NullablePartitionStateCode) Get() *PartitionStateCode {
	return v.value
}

func (v *NullablePartitionStateCode) Set(val *PartitionStateCode) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionStateCode) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionStateCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionStateCode(val *PartitionStateCode) *NullablePartitionStateCode {
	return &NullablePartitionStateCode{value: val, isSet: true}
}

func (v NullablePartitionStateCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionStateCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
