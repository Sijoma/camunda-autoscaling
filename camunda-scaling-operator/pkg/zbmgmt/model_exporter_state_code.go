/*
Cluster Topology Management API

API for managing cluster membership and partition distribution.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zbmgmt

import (
	"encoding/json"
	"fmt"
)

// ExporterStateCode State of an exporter
type ExporterStateCode string

// List of ExporterStateCode
const (
	EXPORTERSTATECODE_UNKNOWN  ExporterStateCode = "UNKNOWN"
	EXPORTERSTATECODE_ENABLED  ExporterStateCode = "ENABLED"
	EXPORTERSTATECODE_DISABLED ExporterStateCode = "DISABLED"
)

// All allowed values of ExporterStateCode enum
var AllowedExporterStateCodeEnumValues = []ExporterStateCode{
	"UNKNOWN",
	"ENABLED",
	"DISABLED",
}

func (v *ExporterStateCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExporterStateCode(value)
	for _, existing := range AllowedExporterStateCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExporterStateCode", value)
}

// NewExporterStateCodeFromValue returns a pointer to a valid ExporterStateCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExporterStateCodeFromValue(v string) (*ExporterStateCode, error) {
	ev := ExporterStateCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExporterStateCode: valid values are %v", v, AllowedExporterStateCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExporterStateCode) IsValid() bool {
	for _, existing := range AllowedExporterStateCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExporterStateCode value
func (v ExporterStateCode) Ptr() *ExporterStateCode {
	return &v
}

type NullableExporterStateCode struct {
	value *ExporterStateCode
	isSet bool
}

func (v NullableExporterStateCode) Get() *ExporterStateCode {
	return v.value
}

func (v *NullableExporterStateCode) Set(val *ExporterStateCode) {
	v.value = val
	v.isSet = true
}

func (v NullableExporterStateCode) IsSet() bool {
	return v.isSet
}

func (v *NullableExporterStateCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExporterStateCode(val *ExporterStateCode) *NullableExporterStateCode {
	return &NullableExporterStateCode{value: val, isSet: true}
}

func (v NullableExporterStateCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExporterStateCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
