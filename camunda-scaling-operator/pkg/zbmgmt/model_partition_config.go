/*
Cluster Topology Management API

API for managing cluster membership and partition distribution.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zbmgmt

import (
	"encoding/json"
)

// checks if the PartitionConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartitionConfig{}

// PartitionConfig struct for PartitionConfig
type PartitionConfig struct {
	Exporting *ExportingConfig `json:"exporting,omitempty"`
}

// NewPartitionConfig instantiates a new PartitionConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartitionConfig() *PartitionConfig {
	this := PartitionConfig{}
	return &this
}

// NewPartitionConfigWithDefaults instantiates a new PartitionConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionConfigWithDefaults() *PartitionConfig {
	this := PartitionConfig{}
	return &this
}

// GetExporting returns the Exporting field value if set, zero value otherwise.
func (o *PartitionConfig) GetExporting() ExportingConfig {
	if o == nil || IsNil(o.Exporting) {
		var ret ExportingConfig
		return ret
	}
	return *o.Exporting
}

// GetExportingOk returns a tuple with the Exporting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionConfig) GetExportingOk() (*ExportingConfig, bool) {
	if o == nil || IsNil(o.Exporting) {
		return nil, false
	}
	return o.Exporting, true
}

// HasExporting returns a boolean if a field has been set.
func (o *PartitionConfig) HasExporting() bool {
	if o != nil && !IsNil(o.Exporting) {
		return true
	}

	return false
}

// SetExporting gets a reference to the given ExportingConfig and assigns it to the Exporting field.
func (o *PartitionConfig) SetExporting(v ExportingConfig) {
	o.Exporting = &v
}

func (o PartitionConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartitionConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Exporting) {
		toSerialize["exporting"] = o.Exporting
	}
	return toSerialize, nil
}

type NullablePartitionConfig struct {
	value *PartitionConfig
	isSet bool
}

func (v NullablePartitionConfig) Get() *PartitionConfig {
	return v.value
}

func (v *NullablePartitionConfig) Set(val *PartitionConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionConfig(val *PartitionConfig) *NullablePartitionConfig {
	return &NullablePartitionConfig{value: val, isSet: true}
}

func (v NullablePartitionConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
