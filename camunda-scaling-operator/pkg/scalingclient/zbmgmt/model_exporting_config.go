/*
Cluster Topology Management API

API for managing cluster membership and partition distribution.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zbmgmt

import (
	"encoding/json"
)

// checks if the ExportingConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportingConfig{}

// ExportingConfig struct for ExportingConfig
type ExportingConfig struct {
	Exporters []ExporterConfig `json:"exporters,omitempty"`
}

// NewExportingConfig instantiates a new ExportingConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportingConfig() *ExportingConfig {
	this := ExportingConfig{}
	return &this
}

// NewExportingConfigWithDefaults instantiates a new ExportingConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportingConfigWithDefaults() *ExportingConfig {
	this := ExportingConfig{}
	return &this
}

// GetExporters returns the Exporters field value if set, zero value otherwise.
func (o *ExportingConfig) GetExporters() []ExporterConfig {
	if o == nil || IsNil(o.Exporters) {
		var ret []ExporterConfig
		return ret
	}
	return o.Exporters
}

// GetExportersOk returns a tuple with the Exporters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportingConfig) GetExportersOk() ([]ExporterConfig, bool) {
	if o == nil || IsNil(o.Exporters) {
		return nil, false
	}
	return o.Exporters, true
}

// HasExporters returns a boolean if a field has been set.
func (o *ExportingConfig) HasExporters() bool {
	if o != nil && !IsNil(o.Exporters) {
		return true
	}

	return false
}

// SetExporters gets a reference to the given []ExporterConfig and assigns it to the Exporters field.
func (o *ExportingConfig) SetExporters(v []ExporterConfig) {
	o.Exporters = v
}

func (o ExportingConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportingConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Exporters) {
		toSerialize["exporters"] = o.Exporters
	}
	return toSerialize, nil
}

type NullableExportingConfig struct {
	value *ExportingConfig
	isSet bool
}

func (v NullableExportingConfig) Get() *ExportingConfig {
	return v.value
}

func (v *NullableExportingConfig) Set(val *ExportingConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableExportingConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableExportingConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportingConfig(val *ExportingConfig) *NullableExportingConfig {
	return &NullableExportingConfig{value: val, isSet: true}
}

func (v NullableExportingConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportingConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
