/*
Cluster Topology Management API

API for managing cluster membership and partition distribution.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zbmgmt

import (
	"encoding/json"
	"time"
)

// checks if the CompletedChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompletedChange{}

// CompletedChange struct for CompletedChange
type CompletedChange struct {
	// The ID of a topology change operation
	Id     *int64  `json:"id,omitempty"`
	Status *string `json:"status,omitempty"`
	// The time when the topology change was started
	StartedAt *time.Time `json:"startedAt,omitempty"`
	// The time when the topology change was completed
	CompletedAt *time.Time `json:"completedAt,omitempty"`
}

// NewCompletedChange instantiates a new CompletedChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompletedChange() *CompletedChange {
	this := CompletedChange{}
	return &this
}

// NewCompletedChangeWithDefaults instantiates a new CompletedChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompletedChangeWithDefaults() *CompletedChange {
	this := CompletedChange{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompletedChange) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletedChange) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompletedChange) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CompletedChange) SetId(v int64) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CompletedChange) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletedChange) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CompletedChange) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CompletedChange) SetStatus(v string) {
	o.Status = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *CompletedChange) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletedChange) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *CompletedChange) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *CompletedChange) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *CompletedChange) GetCompletedAt() time.Time {
	if o == nil || IsNil(o.CompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletedChange) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *CompletedChange) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *CompletedChange) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

func (o CompletedChange) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompletedChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StartedAt) {
		toSerialize["startedAt"] = o.StartedAt
	}
	if !IsNil(o.CompletedAt) {
		toSerialize["completedAt"] = o.CompletedAt
	}
	return toSerialize, nil
}

type NullableCompletedChange struct {
	value *CompletedChange
	isSet bool
}

func (v NullableCompletedChange) Get() *CompletedChange {
	return v.value
}

func (v *NullableCompletedChange) Set(val *CompletedChange) {
	v.value = val
	v.isSet = true
}

func (v NullableCompletedChange) IsSet() bool {
	return v.isSet
}

func (v *NullableCompletedChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompletedChange(val *CompletedChange) *NullableCompletedChange {
	return &NullableCompletedChange{value: val, isSet: true}
}

func (v NullableCompletedChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompletedChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
