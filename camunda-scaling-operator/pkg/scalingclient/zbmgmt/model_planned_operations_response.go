/*
Cluster Topology Management API

API for managing cluster membership and partition distribution.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zbmgmt

import (
	"encoding/json"
)

// checks if the PlannedOperationsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlannedOperationsResponse{}

// PlannedOperationsResponse Returns the current topology, planned changes and the expected final topology when the planned changes have completed.
type PlannedOperationsResponse struct {
	// The ID of a topology change operation
	ChangeId *int64 `json:"changeId,omitempty"`
	// Current topology of the cluster
	CurrentTopology []BrokerState `json:"currentTopology,omitempty"`
	// A sequence of operations that will be performed to transform the current topology into the expected topology.
	PlannedChanges []Operation `json:"plannedChanges,omitempty"`
	// The expected final topology when the planned changes have completed.
	ExpectedTopology []BrokerState `json:"expectedTopology,omitempty"`
}

// NewPlannedOperationsResponse instantiates a new PlannedOperationsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlannedOperationsResponse() *PlannedOperationsResponse {
	this := PlannedOperationsResponse{}
	return &this
}

// NewPlannedOperationsResponseWithDefaults instantiates a new PlannedOperationsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlannedOperationsResponseWithDefaults() *PlannedOperationsResponse {
	this := PlannedOperationsResponse{}
	return &this
}

// GetChangeId returns the ChangeId field value if set, zero value otherwise.
func (o *PlannedOperationsResponse) GetChangeId() int64 {
	if o == nil || IsNil(o.ChangeId) {
		var ret int64
		return ret
	}
	return *o.ChangeId
}

// GetChangeIdOk returns a tuple with the ChangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedOperationsResponse) GetChangeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ChangeId) {
		return nil, false
	}
	return o.ChangeId, true
}

// HasChangeId returns a boolean if a field has been set.
func (o *PlannedOperationsResponse) HasChangeId() bool {
	if o != nil && !IsNil(o.ChangeId) {
		return true
	}

	return false
}

// SetChangeId gets a reference to the given int64 and assigns it to the ChangeId field.
func (o *PlannedOperationsResponse) SetChangeId(v int64) {
	o.ChangeId = &v
}

// GetCurrentTopology returns the CurrentTopology field value if set, zero value otherwise.
func (o *PlannedOperationsResponse) GetCurrentTopology() []BrokerState {
	if o == nil || IsNil(o.CurrentTopology) {
		var ret []BrokerState
		return ret
	}
	return o.CurrentTopology
}

// GetCurrentTopologyOk returns a tuple with the CurrentTopology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedOperationsResponse) GetCurrentTopologyOk() ([]BrokerState, bool) {
	if o == nil || IsNil(o.CurrentTopology) {
		return nil, false
	}
	return o.CurrentTopology, true
}

// HasCurrentTopology returns a boolean if a field has been set.
func (o *PlannedOperationsResponse) HasCurrentTopology() bool {
	if o != nil && !IsNil(o.CurrentTopology) {
		return true
	}

	return false
}

// SetCurrentTopology gets a reference to the given []BrokerState and assigns it to the CurrentTopology field.
func (o *PlannedOperationsResponse) SetCurrentTopology(v []BrokerState) {
	o.CurrentTopology = v
}

// GetPlannedChanges returns the PlannedChanges field value if set, zero value otherwise.
func (o *PlannedOperationsResponse) GetPlannedChanges() []Operation {
	if o == nil || IsNil(o.PlannedChanges) {
		var ret []Operation
		return ret
	}
	return o.PlannedChanges
}

// GetPlannedChangesOk returns a tuple with the PlannedChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedOperationsResponse) GetPlannedChangesOk() ([]Operation, bool) {
	if o == nil || IsNil(o.PlannedChanges) {
		return nil, false
	}
	return o.PlannedChanges, true
}

// HasPlannedChanges returns a boolean if a field has been set.
func (o *PlannedOperationsResponse) HasPlannedChanges() bool {
	if o != nil && !IsNil(o.PlannedChanges) {
		return true
	}

	return false
}

// SetPlannedChanges gets a reference to the given []Operation and assigns it to the PlannedChanges field.
func (o *PlannedOperationsResponse) SetPlannedChanges(v []Operation) {
	o.PlannedChanges = v
}

// GetExpectedTopology returns the ExpectedTopology field value if set, zero value otherwise.
func (o *PlannedOperationsResponse) GetExpectedTopology() []BrokerState {
	if o == nil || IsNil(o.ExpectedTopology) {
		var ret []BrokerState
		return ret
	}
	return o.ExpectedTopology
}

// GetExpectedTopologyOk returns a tuple with the ExpectedTopology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedOperationsResponse) GetExpectedTopologyOk() ([]BrokerState, bool) {
	if o == nil || IsNil(o.ExpectedTopology) {
		return nil, false
	}
	return o.ExpectedTopology, true
}

// HasExpectedTopology returns a boolean if a field has been set.
func (o *PlannedOperationsResponse) HasExpectedTopology() bool {
	if o != nil && !IsNil(o.ExpectedTopology) {
		return true
	}

	return false
}

// SetExpectedTopology gets a reference to the given []BrokerState and assigns it to the ExpectedTopology field.
func (o *PlannedOperationsResponse) SetExpectedTopology(v []BrokerState) {
	o.ExpectedTopology = v
}

func (o PlannedOperationsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlannedOperationsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChangeId) {
		toSerialize["changeId"] = o.ChangeId
	}
	if !IsNil(o.CurrentTopology) {
		toSerialize["currentTopology"] = o.CurrentTopology
	}
	if !IsNil(o.PlannedChanges) {
		toSerialize["plannedChanges"] = o.PlannedChanges
	}
	if !IsNil(o.ExpectedTopology) {
		toSerialize["expectedTopology"] = o.ExpectedTopology
	}
	return toSerialize, nil
}

type NullablePlannedOperationsResponse struct {
	value *PlannedOperationsResponse
	isSet bool
}

func (v NullablePlannedOperationsResponse) Get() *PlannedOperationsResponse {
	return v.value
}

func (v *NullablePlannedOperationsResponse) Set(val *PlannedOperationsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePlannedOperationsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePlannedOperationsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlannedOperationsResponse(val *PlannedOperationsResponse) *NullablePlannedOperationsResponse {
	return &NullablePlannedOperationsResponse{value: val, isSet: true}
}

func (v NullablePlannedOperationsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlannedOperationsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
