/*
Cluster Topology Management API

API for managing cluster membership and partition distribution.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zbmgmt

import (
	"encoding/json"
	"fmt"
)

// BrokerStateCode State of a broker
type BrokerStateCode string

// List of BrokerStateCode
const (
	BROKERSTATECODE_UNKNOWN BrokerStateCode = "UNKNOWN"
	BROKERSTATECODE_ACTIVE  BrokerStateCode = "ACTIVE"
	BROKERSTATECODE_JOINING BrokerStateCode = "JOINING"
	BROKERSTATECODE_LEAVING BrokerStateCode = "LEAVING"
	BROKERSTATECODE_LEFT    BrokerStateCode = "LEFT"
)

// All allowed values of BrokerStateCode enum
var AllowedBrokerStateCodeEnumValues = []BrokerStateCode{
	"UNKNOWN",
	"ACTIVE",
	"JOINING",
	"LEAVING",
	"LEFT",
}

func (v *BrokerStateCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BrokerStateCode(value)
	for _, existing := range AllowedBrokerStateCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BrokerStateCode", value)
}

// NewBrokerStateCodeFromValue returns a pointer to a valid BrokerStateCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBrokerStateCodeFromValue(v string) (*BrokerStateCode, error) {
	ev := BrokerStateCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BrokerStateCode: valid values are %v", v, AllowedBrokerStateCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BrokerStateCode) IsValid() bool {
	for _, existing := range AllowedBrokerStateCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BrokerStateCode value
func (v BrokerStateCode) Ptr() *BrokerStateCode {
	return &v
}

type NullableBrokerStateCode struct {
	value *BrokerStateCode
	isSet bool
}

func (v NullableBrokerStateCode) Get() *BrokerStateCode {
	return v.value
}

func (v *NullableBrokerStateCode) Set(val *BrokerStateCode) {
	v.value = val
	v.isSet = true
}

func (v NullableBrokerStateCode) IsSet() bool {
	return v.isSet
}

func (v *NullableBrokerStateCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrokerStateCode(val *BrokerStateCode) *NullableBrokerStateCode {
	return &NullableBrokerStateCode{value: val, isSet: true}
}

func (v NullableBrokerStateCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrokerStateCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
